[{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\App.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\AdminLogin.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\ClientRegister.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\Home.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\Information.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\KartBookingForm.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\Navegate.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\PaymentConfirmation.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\RackWeekly.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBookings'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [weekStart, selectedMonth, selectedYear, fetchBookings]","fix":{"range":[2145,2185],"text":"[weekStart, selectedMonth, selectedYear, fetchBookings]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentDate'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [currentDate, selectedMonth, selectedYear]","fix":{"range":[2565,2594],"text":"[currentDate, selectedMonth, selectedYear]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Paper, Table, TableBody, TableCell, TableContainer, TableHead, \r\n  TableRow, Typography, Box, Alert, IconButton, FormControl,\r\n  Select, MenuItem, Grid\r\n} from '@mui/material';\r\nimport { \r\n  format, startOfWeek, addDays, addWeeks, subWeeks, \r\n  startOfMonth, getMonth, getYear, setMonth, setYear\r\n} from 'date-fns';\r\nimport { es } from 'date-fns/locale';\r\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\r\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\r\nimport bookingService from '../services/services.management';\r\n\r\nconst RackWeekly = () => {\r\n  // Estados para las fechas y selecciones\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [weekStart, setWeekStart] = useState(startOfWeek(currentDate, { weekStartsOn: 1 }));\r\n  const [selectedMonth, setSelectedMonth] = useState(getMonth(currentDate));\r\n  const [selectedYear, setSelectedYear] = useState(getYear(currentDate));\r\n\r\n  // Estados para los datos\r\n  const [bookings, setBookings] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Constantes para la interfaz\r\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));\r\n  const timeBlocks = Array.from({ length: 13 }, (_, i) => `${i + 10}:00`);\r\n  const months = Array.from({ length: 12 }, (_, i) => i);\r\n  const years = Array.from({ length: 5 }, (_, i) => getYear(currentDate) - 2 + i);\r\n\r\n  // Obtener reservas del servicio\r\n  const fetchBookings = async () => {\r\n    try {\r\n      // Llama a la función pasando mes y año seleccionados\r\n      const response = await bookingService.getBookingsForRack(selectedMonth + 1, selectedYear);\r\n      console.log(\"Response from bookingService:\", response);\r\n      setBookings(response.data);\r\n      setError(null);\r\n    } catch (err) {\r\n      console.error(\"Error al obtener las reservas:\", err);\r\n      setError(\"No se pudieron cargar las reservas. Por favor, intente de nuevo más tarde.\");\r\n    }\r\n  };\r\n\r\n  // Cargar reservas cuando cambia la semana, mes o año\r\n  useEffect(() => {\r\n    fetchBookings();\r\n     \r\n  }, [weekStart, selectedMonth, selectedYear]);\r\n\r\n  // Actualizar la semana cuando cambia el mes o año\r\n  useEffect(() => {\r\n    const newDate = setYear(setMonth(currentDate, selectedMonth), selectedYear);\r\n    setCurrentDate(newDate);\r\n    \r\n    // Ir a la primera semana del mes seleccionado\r\n    const firstWeekOfMonth = startOfWeek(startOfMonth(newDate), { weekStartsOn: 1 });\r\n    setWeekStart(firstWeekOfMonth);\r\n  }, [selectedMonth, selectedYear]);\r\n\r\n  // Función para ir a la semana anterior\r\n  const goToPreviousWeek = () => {\r\n    const newWeekStart = subWeeks(weekStart, 1);\r\n    setWeekStart(newWeekStart);\r\n    \r\n    // Actualizar mes y año si cambian\r\n    setSelectedMonth(getMonth(newWeekStart));\r\n    setSelectedYear(getYear(newWeekStart));\r\n  };\r\n\r\n  // Función para ir a la semana siguiente\r\n  const goToNextWeek = () => {\r\n    const newWeekStart = addWeeks(weekStart, 1);\r\n    setWeekStart(newWeekStart);\r\n    \r\n    // Actualizar mes y año si cambian\r\n    setSelectedMonth(getMonth(newWeekStart));\r\n    setSelectedYear(getYear(newWeekStart));\r\n  };\r\n\r\n  // Filtrar reservas por día y hora\r\n  const getBookingsForTimeSlot = (day, timeBlock) => {\r\n    const dateStr = format(day, 'yyyy-MM-dd');\r\n    const hour = parseInt(timeBlock.split(':')[0]);\r\n    \r\n    return bookings.filter(booking => {\r\n      if (booking.bookingDate !== dateStr) return false;\r\n      \r\n      const bookingTimeStr = booking.bookingTime;\r\n      if (!bookingTimeStr) return false;\r\n      \r\n      const bookingHour = parseInt(bookingTimeStr.split(':')[0]);\r\n      return bookingHour === hour;\r\n    });\r\n  };\r\n\r\n  // Extraer el nombre del cliente\r\n  const getClientName = (booking) => {\r\n    if (booking.clientName && booking.clientName.length > 0) {\r\n      return booking.clientName;\r\n    }\r\n    return 'Sin nombre';\r\n  };\r\n\r\n  // Manejo de cambios en mes y año\r\n  const handleMonthChange = (event) => {\r\n    setSelectedMonth(event.target.value);\r\n  };\r\n\r\n  const handleYearChange = (event) => {\r\n    setSelectedYear(event.target.value);\r\n  };\r\n\r\n  // Mostrar si hay error\r\n  if (error) {\r\n    return (\r\n      <Paper elevation={8} sx={{ p: 3, m: 2, borderRadius: 3, background: 'linear-gradient(135deg, #FEF3C7 0%, #FBBF24 100%)', border: '2px solid #D97706' }}>\r\n        <Alert \r\n          severity=\"error\" \r\n          sx={{ \r\n            borderRadius: 3,\r\n            backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n            border: '2px solid #EF4444',\r\n            '& .MuiAlert-icon': {\r\n              fontSize: '1.5rem',\r\n              color: '#DC2626'\r\n            }\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" sx={{ mb: 1, color: '#DC2626', fontWeight: 'bold' }}>\r\n            ⚠️ Error de Conexión\r\n          </Typography>\r\n          <Typography variant=\"body1\" sx={{ color: '#7F1D1D' }}>\r\n            {error}\r\n          </Typography>\r\n        </Alert>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Paper \r\n      elevation={8}\r\n      sx={{ \r\n        width: '100%', \r\n        overflow: 'hidden',\r\n        borderRadius: 3,\r\n        border: '2px solid',\r\n        borderColor: '#A78BFA',\r\n        background: 'linear-gradient(135deg, #F3E8FF 0%, #DDD6FE 100%)'\r\n      }}\r\n    >\r\n      {/* Cabecera con controles de navegación */}\r\n      <Box \r\n        sx={{ \r\n          p: 3, \r\n          background: 'linear-gradient(135deg, #2E1065 0%, #5B21B6 50%, #1E3A8A 100%)',\r\n          color: 'white',\r\n          borderBottom: '2px solid',\r\n          borderBottomColor: '#2E1065'\r\n        }}\r\n      >\r\n        <Grid container spacing={2} alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Grid item xs={12} md={6}>\r\n            <Typography \r\n              variant=\"h5\" \r\n              fontWeight=\"bold\"\r\n              sx={{ \r\n                textShadow: '1px 1px 2px rgba(0,0,0,0.3)',\r\n                letterSpacing: 0.5\r\n              }}\r\n            >\r\n              Rack Semanal de Ocupación\r\n            </Typography>\r\n            <Typography \r\n              variant=\"body2\" \r\n              sx={{ \r\n                opacity: 0.9,\r\n                mt: 0.5,\r\n                fontStyle: 'italic'\r\n              }}\r\n            >\r\n              Gestiona y visualiza las reservas de la pista\r\n            </Typography>\r\n          </Grid>\r\n          \r\n          {/* Selector de mes y año */}\r\n          <Grid item xs={12} md={6}>\r\n            <Box sx={{ display: 'flex', justifyContent: { xs: 'center', md: 'flex-end' }, gap: 2 }}>\r\n              <FormControl \r\n                size=\"small\"                  sx={{ \r\n                    minWidth: 140,\r\n                    '& .MuiOutlinedInput-root': {\r\n                      backgroundColor: 'rgba(255,255,255,0.95)',\r\n                      borderRadius: 2,\r\n                      border: '2px solid rgba(255,255,255,0.3)',\r\n                      '&:hover': {\r\n                        backgroundColor: 'white',\r\n                        borderColor: '#A78BFA',\r\n                        transform: 'translateY(-1px)',\r\n                        boxShadow: '0 4px 12px rgba(167, 139, 250, 0.3)'\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  <Select\r\n                    value={selectedMonth}\r\n                    onChange={handleMonthChange}\r\n                    displayEmpty\r\n                    sx={{\r\n                      borderRadius: 2,\r\n                      fontWeight: 'bold',\r\n                      color: '#5B21B6'\r\n                    }}\r\n                  >\r\n                  {months.map((month) => (\r\n                    <MenuItem key={month} value={month}>\r\n                      {format(new Date(2000, month, 1), 'MMMM', { locale: es })}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              \r\n              <FormControl \r\n                size=\"small\" \r\n                sx={{ \r\n                  minWidth: 100,\r\n                  '& .MuiOutlinedInput-root': {\r\n                    backgroundColor: 'rgba(255,255,255,0.95)',\r\n                    borderRadius: 2,\r\n                    border: '2px solid rgba(255,255,255,0.3)',\r\n                    '&:hover': {\r\n                      backgroundColor: 'white',\r\n                      borderColor: '#A78BFA',\r\n                      transform: 'translateY(-1px)',\r\n                      boxShadow: '0 4px 12px rgba(167, 139, 250, 0.3)'\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                <Select\r\n                  value={selectedYear}\r\n                  onChange={handleYearChange}\r\n                  displayEmpty\r\n                  sx={{\r\n                    borderRadius: 2,\r\n                    fontWeight: 'bold',\r\n                    color: '#5B21B6'\r\n                  }}\r\n                >\r\n                  {years.map((year) => (\r\n                    <MenuItem key={year} value={year}>{year}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      \r\n      {/* Información de la semana actual con controles de navegación */}\r\n      <Box \r\n        sx={{ \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'space-between', \r\n          px: 3, \r\n          py: 2,\r\n          background: 'linear-gradient(135deg, #E0E7FF 0%, #C7D2FE 100%)',\r\n          borderBottom: '2px solid',\r\n          borderBottomColor: '#A78BFA'\r\n        }}\r\n      >\r\n        <IconButton \r\n          onClick={goToPreviousWeek}\r\n          sx={{\r\n            background: ' #5B21B6',\r\n            color: 'white',\r\n            border: '2px solid rgba(255,255,255,0.2)',\r\n            '&:hover': {\r\n              background: ' #5B21B6',\r\n              transform: 'scale(1.1) translateY(-2px)',\r\n              boxShadow: '0 8px 20px rgba(91, 33, 182, 0.4)'\r\n            },\r\n            transition: 'all 0.3s ease',\r\n            boxShadow: '0 4px 12px rgba(91, 33, 182, 0.3)'\r\n          }}\r\n          size=\"large\"\r\n        >\r\n          <ArrowBackIosNewIcon />\r\n        </IconButton>\r\n        \r\n        <Box sx={{ textAlign: 'center' }}>\r\n          <Typography \r\n            variant=\"h6\" \r\n            color=\"text.primary\"\r\n            fontWeight=\"bold\"\r\n            sx={{ \r\n              mb: 0.5,\r\n              color: '#5B21B6',\r\n              textShadow: '1px 1px 2px rgba(91, 33, 182, 0.2)'\r\n            }}\r\n          >\r\n            Semana del {format(weekDays[0], 'dd MMMM', { locale: es })} al {format(weekDays[6], 'dd MMMM', { locale: es })}\r\n          </Typography>\r\n        </Box>\r\n        \r\n        <IconButton \r\n          onClick={goToNextWeek}\r\n          sx={{\r\n            background: ' #5B21B6',\r\n            color: 'white',\r\n            border: '2px solid rgba(255,255,255,0.2)',\r\n            '&:hover': {\r\n              background: ' #5B21B6',\r\n              transform: 'scale(1.1) translateY(-2px)',\r\n              boxShadow: '0 8px 20px rgba(91, 33, 182, 0.4)'\r\n            },\r\n            transition: 'all 0.3s ease',\r\n            boxShadow: '0 4px 12px rgba(91, 33, 182, 0.3)'\r\n          }}\r\n          size=\"large\"\r\n        >\r\n          <ArrowForwardIosIcon />\r\n        </IconButton>\r\n      </Box>\r\n      \r\n      {/* Tabla con las reservas */}\r\n      <TableContainer sx={{ maxHeight: 650, backgroundColor: 'rgba(255,255,255,0.95)' }}>\r\n        <Table stickyHeader aria-label=\"rack de reservas\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell \r\n                sx={{ \r\n                  width: '100px', \r\n                  background: ' #5B21B6',\r\n                  color: 'white',\r\n                  borderRight: '2px solid',\r\n                  borderRightColor: '#2E1065',\r\n                  boxShadow: '2px 0 8px rgba(91, 33, 182, 0.3)'\r\n                }}\r\n              >\r\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\" sx={{ textAlign: 'center' }}>\r\n                  Hora\r\n                </Typography>\r\n              </TableCell>\r\n              \r\n              {weekDays.map((day, index) => (\r\n                <TableCell \r\n                  key={day.toString()} \r\n                  align=\"center\" \r\n                  sx={{ \r\n                    width: '130px', \r\n                    background: ' #5B21B6',\r\n                    color: 'white',\r\n                    borderRight: index < weekDays.length - 1 ? '2px solid rgba(255,255,255,0.2)' : 'none',\r\n                    boxShadow: index % 2 === 0 ? '0 2px 8px rgba(91, 33, 182, 0.3)' : '0 2px 8px rgba(46, 16, 101, 0.3)'\r\n                  }}\r\n                >\r\n                  <Typography variant=\"subtitle1\" fontWeight=\"bold\" sx={{ textTransform: 'capitalize', textShadow: '1px 1px 2px rgba(0,0,0,0.3)' }}>\r\n                    {format(day, 'EEEE', { locale: es })}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" sx={{ opacity: 0.95, fontWeight: 'medium' }}>\r\n                    {format(day, 'dd/MM')}\r\n                  </Typography>\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          \r\n          <TableBody>\r\n            {timeBlocks.map((timeBlock) => (\r\n              <TableRow \r\n                key={timeBlock}\r\n              >\r\n                <TableCell \r\n                  sx={{ \r\n                    background: ' #5B21B6',\r\n                    color: 'white',\r\n                    fontWeight: 'bold',\r\n                    fontSize: '1rem',\r\n                    position: 'sticky',\r\n                    left: 0,\r\n                    borderRight: '2px solid',\r\n                    borderRightColor: '#2E1065',\r\n                    zIndex: 1,\r\n                    textAlign: 'center',\r\n                    textShadow: '1px 1px 2px rgba(0,0,0,0.3)',\r\n                    boxShadow: '2px 0 8px rgba(91, 33, 182, 0.3)'\r\n                  }}\r\n                >\r\n                  {timeBlock}\r\n                </TableCell>\r\n                \r\n                {weekDays.map((day, colIndex) => {\r\n                  const slotBookings = getBookingsForTimeSlot(day, timeBlock);\r\n                  return (\r\n                    <TableCell \r\n                      key={`${day.toString()}-${timeBlock}`} \r\n                      align=\"left\" \r\n                      sx={{ \r\n                        verticalAlign: 'top',\r\n                        height: '90px',\r\n                        padding: 1.5,\r\n                        border: '2px solid',\r\n                        borderColor: '#C7D2FE',\r\n                        backgroundColor: colIndex % 2 === 0 ? 'rgba(231, 229, 254, 0.3)' : 'rgba(255,255,255,0.8)',\r\n                        transition: 'all 0.2s ease'\r\n                      }}\r\n                    >\r\n                      {slotBookings.length === 0 ? (\r\n                        <Box \r\n                          sx={{ \r\n                            height: '100%', \r\n                            minHeight: '70px',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            color: '#A78BFA',\r\n                            fontStyle: 'italic',\r\n                            backgroundColor: 'rgba(243, 232, 255, 0.3)',\r\n                            borderRadius: 2,\r\n                            border: '2px dashed',\r\n                            borderColor: '#C7D2FE'\r\n                          }}\r\n                        >\r\n                          <Typography variant=\"body2\" sx={{ opacity: 0.8, fontWeight: 'medium' }}>\r\n                            Disponible\r\n                          </Typography>\r\n                        </Box>\r\n                      ) : (\r\n                        slotBookings.map((booking, bookingIndex) => (\r\n                          <Box \r\n                            key={booking.id} \r\n                            sx={{ \r\n                              p: 1.5, \r\n                              borderRadius: 2, \r\n                              background: 'rgb(148, 88, 245)',\r\n                              color: 'white',\r\n                              mb: bookingIndex < slotBookings.length - 1 ? 1 : 0,\r\n                              fontSize: '0.85rem',\r\n                              border: '2px solid',\r\n                              position: 'relative'\r\n                            }}\r\n                          >\r\n                            <Typography \r\n                              variant=\"body2\" \r\n                              fontWeight=\"bold\" \r\n                              sx={{ \r\n                                fontSize: '0.85rem',\r\n                                textShadow: '1px 1px 2px rgba(0,0,0,0.3)',\r\n                                mb: 0.5\r\n                              }}\r\n                            >\r\n                              {getClientName(booking)}\r\n                            </Typography>\r\n                            <Typography \r\n                              variant=\"body2\" \r\n                              sx={{ \r\n                                fontSize: '0.8rem',\r\n                                opacity: 0.95,\r\n                                fontWeight: 'medium'\r\n                              }}\r\n                            >\r\n                              {booking.bookingTime} - {booking.bookingTimeEnd}\r\n                            </Typography>\r\n                          </Box>\r\n                        ))\r\n                      )}\r\n                    </TableCell>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default RackWeekly;","usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\Reports.jsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":515,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[25017,25159],"text":"\r\n                        Seleccione el rango de meses y haga clic en &quot;Generar Reportes\" para ver los análisis de ventas\r\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[25017,25159],"text":"\r\n                        Seleccione el rango de meses y haga clic en &ldquo;Generar Reportes\" para ver los análisis de ventas\r\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[25017,25159],"text":"\r\n                        Seleccione el rango de meses y haga clic en &#34;Generar Reportes\" para ver los análisis de ventas\r\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[25017,25159],"text":"\r\n                        Seleccione el rango de meses y haga clic en &rdquo;Generar Reportes\" para ver los análisis de ventas\r\n                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":515,"column":86,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[25017,25159],"text":"\r\n                        Seleccione el rango de meses y haga clic en \"Generar Reportes&quot; para ver los análisis de ventas\r\n                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[25017,25159],"text":"\r\n                        Seleccione el rango de meses y haga clic en \"Generar Reportes&ldquo; para ver los análisis de ventas\r\n                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[25017,25159],"text":"\r\n                        Seleccione el rango de meses y haga clic en \"Generar Reportes&#34; para ver los análisis de ventas\r\n                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[25017,25159],"text":"\r\n                        Seleccione el rango de meses y haga clic en \"Generar Reportes&rdquo; para ver los análisis de ventas\r\n                    "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { \r\n    Typography, \r\n    Paper, \r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableContainer, \r\n    TableHead, \r\n    TableRow,\r\n    FormControl, \r\n    InputLabel, \r\n    Select, \r\n    MenuItem, \r\n    Box, \r\n    Button,\r\n    Container,\r\n    Alert,\r\n    CircularProgress,\r\n    Chip\r\n} from '@mui/material';\r\nimport {\r\n    SportsMotorsports as SportsMotorsportsIcon,\r\n    Assessment as AssessmentIcon,\r\n    Search as SearchIcon,\r\n    CalendarMonth as CalendarIcon\r\n} from '@mui/icons-material';\r\nimport bookingService from '../services/services.management';\r\n\r\nconst Reports = () => {\r\n    const [reportData1, setreportData1] = useState({});\r\n    const [reportData2, setreportData2] = useState({});\r\n    const [totalIncomes1, setTotalIncomes1] = useState({});\r\n    const [totalIncomes2, setTotalIncomes2] = useState({});\r\n    const [error, setError] = useState(null);\r\n    const [startMonth, setStartMonth] = useState(1);\r\n    const [endMonth, setEndMonth] = useState(12);\r\n    const [showTables, setShowTables] = useState(false);\r\n    \r\n    // Estados para mejorar UX (Nielsen: Visibilidad del estado del sistema)\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    \r\n    const lapsOrMaxTime = [10, 15 ,20]\r\n    const people = [2, 5, 10, 15];\r\n\r\n    // Función mejorada para validar y cargar reportes (Nielsen: Prevención de errores)\r\n    const fetchAllReports = async () => {\r\n        // Validación de entrada (Nielsen: Prevención de errores)\r\n        if (startMonth > endMonth) {\r\n            setError('El mes de inicio debe ser anterior al mes de fin');\r\n            return;\r\n        }\r\n        \r\n        setIsLoading(true);\r\n        setError(null);\r\n        setSuccessMessage('');\r\n        \r\n        try {\r\n            // Cargar reportes en paralelo para mejor rendimiento\r\n            const promises = [\r\n                ...lapsOrMaxTime.map(laps => fetchConfirmedBookings(laps, startMonth, endMonth)),\r\n                ...people.map(p => fetchConfirmedBookingsByPeople(p, startMonth, endMonth))\r\n            ];\r\n            \r\n            await Promise.all(promises);\r\n            \r\n            setShowTables(true);\r\n            setSuccessMessage('Reportes cargados exitosamente');\r\n            \r\n            // Limpiar mensaje de éxito después de 3 segundos\r\n            setTimeout(() => setSuccessMessage(''), 3000);\r\n            \r\n        } catch (error) {\r\n            console.error('Error al cargar reportes:', error);\r\n            setError('Error al cargar los reportes. Por favor, intente nuevamente.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Función mejorada para obtener las reservas por mes y número de vueltas (Nielsen: Visibilidad del estado del sistema)\r\n    const fetchConfirmedBookings = async (lapsOrTimeMax, startMonth, endMonth) => {\r\n        try {\r\n            const response = await bookingService.getBookingsForReport1(lapsOrTimeMax, startMonth, endMonth);\r\n            const responseTotalIncomes1 = await bookingService.getIncomesForLapsOfMonth(startMonth, endMonth);\r\n            setreportData1(prev => ({...prev, [lapsOrTimeMax]: response.data})); \r\n            setTotalIncomes1(responseTotalIncomes1.data);\r\n        } catch (error) {\r\n            console.error('Error en reporte 1:', error);\r\n            throw new Error(\"No se pudieron cargar las reservas del reporte de vueltas/tiempo. Por favor, intente de nuevo más tarde.\");\r\n        }\r\n    };\r\n\r\n    // Función mejorada para obtener las reservas por cantidad de integrantes (Nielsen: Visibilidad del estado del sistema)\r\n    const fetchConfirmedBookingsByPeople = async (people, startMonth, endMonth) => {\r\n        try{\r\n            const response2 = await bookingService.getBookingsForReport2(people, startMonth, endMonth);\r\n            const responseTotalIncomes2 = await bookingService.getIncomesForNumOfPeopleOfMonth(startMonth, endMonth);\r\n            setreportData2(prev => ({...prev, [people]: response2.data})); \r\n            setTotalIncomes2(responseTotalIncomes2.data);\r\n        } catch (error) {\r\n            console.error('Error en reporte 2:', error);\r\n            throw new Error(\"No se pudieron cargar las reservas del reporte de personas. Por favor, intente de nuevo más tarde.\");\r\n        }\r\n    };\r\n\r\n    // Nombres de los meses\r\n    const monthNames = [\r\n        \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\",\r\n        \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\r\n    ];\r\n\r\n    // Función para limpiar errores (Nielsen: Control y libertad del usuario)\r\n    const clearError = () => {\r\n        setError(null);\r\n    };\r\n\r\n    // Calcula el rango de meses a mostrar según selección\r\n    const selectedMonths = monthNames.slice(startMonth - 1, endMonth);\r\n\r\n    return (\r\n        <Box sx={{ bgcolor: 'background.default', minHeight: '100vh' }}>\r\n            {/* Hero Section */}\r\n            <Box \r\n                sx={{ \r\n                    background: 'linear-gradient(135deg, #2E1065 0%, #5B21B6 50%, #1E3A8A 100%)',\r\n                    color: 'white',\r\n                    py: 3,\r\n                    textAlign: 'center'\r\n                }}\r\n            >\r\n                <Container maxWidth=\"lg\">\r\n                    <SportsMotorsportsIcon sx={{ fontSize: 60, mb: 2, color: 'white' }} />\r\n                    <Typography \r\n                        variant=\"h3\" \r\n                        component=\"h1\" \r\n                        gutterBottom \r\n                        sx={{ \r\n                            fontWeight: 'bold',\r\n                            mb: 2,\r\n                            fontSize: { xs: '1.8rem', md: '2.5rem' }\r\n                        }}\r\n                    >\r\n                        Reportes de Ventas\r\n                    </Typography>\r\n                    <Typography \r\n                        variant=\"h6\" \r\n                        sx={{ \r\n                            mb: 2,\r\n                            opacity: 0.9,\r\n                            fontSize: { xs: '1rem', md: '1.2rem' }\r\n                        }}\r\n                    >\r\n                        Analice el rendimiento de su negocio con reportes detallados\r\n                    </Typography>\r\n                </Container>\r\n            </Box>\r\n\r\n            <Container maxWidth=\"xl\" sx={{ py: 4 }}>\r\n                {/* Panel de Control */}\r\n                <Paper \r\n                    elevation={8} \r\n                    sx={{ \r\n                        p: 4, \r\n                        mb: 4,\r\n                        background: 'linear-gradient(135deg, #F8FAFC 0%, #F1F5F9 100%)',\r\n                        border: '2px solid',\r\n                        borderColor: '#E2E8F0',\r\n                        borderRadius: 3,\r\n                        position: 'relative',\r\n                        overflow: 'hidden',\r\n                        '&::before': {\r\n                            content: '\"\"',\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0,\r\n                            right: 0,\r\n                            height: '4px',\r\n                            background: 'linear-gradient(90deg, #5B21B6 0%, #1E3A8A 100%)'\r\n                        }\r\n                    }}\r\n                >\r\n                    <Typography \r\n                        variant=\"h5\" \r\n                        gutterBottom \r\n                        sx={{ \r\n                            display: 'flex', \r\n                            alignItems: 'center', \r\n                            gap: 2,\r\n                            color: '#5B21B6',\r\n                            fontWeight: 'bold',\r\n                            mb: 3\r\n                        }}\r\n                    >\r\n                        <AssessmentIcon sx={{ fontSize: 30, color: '#5B21B6' }} />\r\n                        Configuración del Reporte\r\n                    </Typography>\r\n\r\n                    {/* Información contextual (Nielsen: Ayuda y documentación) */}\r\n                    <Alert \r\n                        severity=\"info\" \r\n                        sx={{ \r\n                            mb: 3,\r\n                            borderRadius: 2,\r\n                            border: '2px solid #3B82F6',\r\n                            background: 'linear-gradient(135deg, #EFF6FF 0%, #DBEAFE 100%)',\r\n                            '& .MuiAlert-icon': {\r\n                                color: '#3B82F6'\r\n                            },\r\n                            '& .MuiAlert-message': {\r\n                                color: '#1E3A8A',\r\n                                fontWeight: 500\r\n                            }\r\n                        }}\r\n                    >\r\n                        <Typography variant=\"body2\">\r\n                            <strong>Información:</strong> Seleccione el rango de meses para generar reportes de ingresos por vueltas/tiempo y número de personas.\r\n                        </Typography>\r\n                    </Alert>\r\n\r\n                    {/* Selectores de mes mejorados */}\r\n                    <Box sx={{ display: 'flex', gap: 3, mb: 3, justifyContent: 'center', flexWrap: 'wrap' }}>\r\n                        <FormControl sx={{ minWidth: 200 }}>\r\n                            <InputLabel sx={{ color: '#5B21B6', '&.Mui-focused': { color: '#5B21B6' } }}>\r\n                                <CalendarIcon sx={{ mr: 1, fontSize: 18 }} />\r\n                                Mes inicio\r\n                            </InputLabel>\r\n                            <Select\r\n                                value={startMonth}\r\n                                label=\"Mes inicio\"\r\n                                onChange={(e) => {\r\n                                    setStartMonth(e.target.value);\r\n                                    if (error) clearError();\r\n                                }}\r\n                                sx={{\r\n                                    backgroundColor: 'white',\r\n                                    '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                                        borderColor: '#5B21B6'\r\n                                    },\r\n                                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                                        borderColor: '#5B21B6'\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {monthNames.map((name, idx) => (\r\n                                    <MenuItem key={name} value={idx+1}>{name}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                        \r\n                        <FormControl sx={{ minWidth: 200 }}>\r\n                            <InputLabel sx={{ color: '#5B21B6', '&.Mui-focused': { color: '#5B21B6' } }}>\r\n                                <CalendarIcon sx={{ mr: 1, fontSize: 18 }} />\r\n                                Mes fin\r\n                            </InputLabel>\r\n                            <Select\r\n                                value={endMonth}\r\n                                label=\"Mes fin\"\r\n                                onChange={(e) => {\r\n                                    setEndMonth(e.target.value);\r\n                                    if (error) clearError();\r\n                                }}\r\n                                sx={{\r\n                                    backgroundColor: 'white',\r\n                                    '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                                        borderColor: '#5B21B6'\r\n                                    },\r\n                                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                                        borderColor: '#5B21B6'\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {monthNames.map((name, idx) => (\r\n                                    <MenuItem key={name} value={idx+1}>{name}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                        \r\n                        <Button \r\n                            variant=\"contained\" \r\n                            onClick={fetchAllReports}\r\n                            disabled={isLoading}\r\n                            startIcon={isLoading ? <CircularProgress size={20} color=\"inherit\" /> : <SearchIcon />}\r\n                            sx={{\r\n                                minWidth: 160,\r\n                                height: 56,\r\n                                background: 'linear-gradient(135deg, #5B21B6 0%, #1E3A8A 100%)',\r\n                                fontWeight: 'bold',\r\n                                '&:hover': {\r\n                                    background: 'linear-gradient(135deg, #2E1065 0%, #1E40AF 100%)',\r\n                                    transform: 'translateY(-1px)',\r\n                                    boxShadow: '0 4px 12px rgba(91, 33, 182, 0.3)'\r\n                                },\r\n                                '&:disabled': {\r\n                                    background: '#E2E8F0',\r\n                                    color: '#94A3B8'\r\n                                },\r\n                                transition: 'all 0.3s ease'\r\n                            }}\r\n                        >\r\n                            {isLoading ? 'Generando...' : 'Generar Reportes'}\r\n                        </Button>\r\n                    </Box>\r\n\r\n                    {/* Resumen de selección (Nielsen: Visibilidad del estado del sistema) */}\r\n                    <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, flexWrap: 'wrap' }}>\r\n                        <Chip \r\n                            label={`Período: ${monthNames[startMonth-1]} - ${monthNames[endMonth-1]}`}\r\n                            sx={{ \r\n                                bgcolor: '#E0F2FE', \r\n                                color: '#0369A1', \r\n                                fontWeight: 'bold' \r\n                            }} \r\n                        />\r\n                        <Chip \r\n                            label={`${selectedMonths.length} meses seleccionados`}\r\n                            sx={{ \r\n                                bgcolor: '#F0F9FF', \r\n                                color: '#0284C7', \r\n                                fontWeight: 'bold' \r\n                            }} \r\n                        />\r\n                    </Box>\r\n                </Paper>\r\n\r\n                {/* Mensajes de estado */}\r\n                {error && (\r\n                    <Alert \r\n                        severity=\"error\" \r\n                        sx={{ \r\n                            mb: 3,\r\n                            borderRadius: 2,\r\n                            border: '2px solid #EF4444',\r\n                            background: 'linear-gradient(135deg, #FEF2F2 0%, #FEE2E2 100%)',\r\n                            '& .MuiAlert-icon': {\r\n                                color: '#EF4444'\r\n                            },\r\n                            '& .MuiAlert-message': {\r\n                                color: '#991B1B',\r\n                                fontWeight: 500\r\n                            }\r\n                        }}\r\n                        onClose={clearError}\r\n                    >\r\n                        {error}\r\n                    </Alert>\r\n                )}\r\n\r\n                {successMessage && (\r\n                    <Alert \r\n                        severity=\"success\" \r\n                        sx={{ \r\n                            mb: 3,\r\n                            borderRadius: 2,\r\n                            border: '2px solid #10B981',\r\n                            background: 'linear-gradient(135deg, #ECFDF5 0%, #D1FAE5 100%)',\r\n                            '& .MuiAlert-icon': {\r\n                                color: '#10B981'\r\n                            },\r\n                            '& .MuiAlert-message': {\r\n                                color: '#065F46',\r\n                                fontWeight: 500\r\n                            }\r\n                        }}\r\n                    >\r\n                        {successMessage}\r\n                    </Alert>\r\n                )}\r\n                {/* Tablas de reportes - versión sencilla */}\r\n            {showTables && (\r\n                <>\r\n                {/* Reporte de ingresos por número de vueltas o tiempo máximo */}\r\n                <Typography variant=\"h6\" gutterBottom align=\"center\" sx={{ mt: 6 }}>\r\n                    Ingresos por número de vueltas o tiempo máximo\r\n                </Typography>\r\n                <TableContainer component={Paper} variant=\"outlined\" sx={{ mb: 3, width: '100%', overflowX: 'auto' }}>\r\n                    <Table sx={{ minWidth: 800 }}>\r\n                        <TableHead>\r\n                            <TableRow sx={{ backgroundColor: '#f5f5f5' }}>\r\n                                <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>Vueltas / Tiempo</TableCell>\r\n                                {selectedMonths.map((month) => (\r\n                                    <TableCell key={month} align=\"center\" sx={{ fontWeight: 'bold' }}>\r\n                                        {month}\r\n                                    </TableCell>\r\n                                ))}\r\n                                <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>Total</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {lapsOrMaxTime.map((laps) => {\r\n                                const data = reportData1[laps] || [];\r\n                                // Suma total del rango seleccionado\r\n                                const total = selectedMonths.reduce(\r\n                                    (acc, _, i) => acc + (data[startMonth + i] || 0), 0\r\n                                );\r\n                                return (\r\n                                <TableRow key={laps}>\r\n                                    <TableCell align=\"center\">\r\n                                    {`${laps} vueltas o ${laps} mins`}\r\n                                    </TableCell>\r\n                                    {selectedMonths.map((_, i) => (\r\n                                        <TableCell key={selectedMonths[i]} align=\"center\">\r\n                                            {data[startMonth + i] || 0}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                    <TableCell align=\"center\">\r\n                                        {total}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                );\r\n                            })}\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>Total</TableCell>\r\n                                {selectedMonths.map((month, idx) => (\r\n                                    <TableCell key={month} align=\"center\" sx={{ fontWeight: 'bold' }}>\r\n                                        {Array.isArray(totalIncomes1) ? (totalIncomes1[startMonth + idx - 1] || 0) : 0}\r\n                                    </TableCell>\r\n                                ))}\r\n                                <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\r\n                                    {Array.isArray(totalIncomes1)\r\n                                        ? selectedMonths.reduce(\r\n                                            (acc, _, idx) => acc + (totalIncomes1[startMonth + idx - 1] || 0), 0\r\n                                        )\r\n                                        : 0}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n\r\n                {/* Reporte de ingresos por número de personas */}\r\n                <Typography variant=\"h6\" gutterBottom align=\"center\" sx={{ mt: 6 }}>\r\n                    Ingresos por número de personas\r\n                </Typography>\r\n                <TableContainer component={Paper} variant=\"outlined\" sx={{ mb: 3, width: '100%', overflowX: 'auto' }}>\r\n                    <Table sx={{ minWidth: 800 }}>\r\n                        <TableHead>\r\n                            <TableRow sx={{ backgroundColor: '#f5f5f5' }}>\r\n                                <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>Número de personas</TableCell>\r\n                                {selectedMonths.map((month) => (\r\n                                    <TableCell key={month} align=\"center\" sx={{ fontWeight: 'bold' }}>\r\n                                        {month}\r\n                                    </TableCell>\r\n                                ))}\r\n                                <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>Total</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {people.map((people) => {\r\n                                const data = reportData2[people] || [];\r\n                                const getPeopleLabel = (people) => {\r\n                                    if (people === 2) return `1 a ${people} personas`;\r\n                                    if (people === 5) return `3 a ${people} personas`;\r\n                                    return `${people - 4} a ${people} personas`;\r\n                                };\r\n                                const total = selectedMonths.reduce(\r\n                                    (acc, _, i) => acc + (data[startMonth + i - 1] || 0), 0\r\n                                );\r\n                                return (\r\n                                <TableRow key={people}>\r\n                                    <TableCell align=\"center\">\r\n                                        {getPeopleLabel(people)}\r\n                                    </TableCell>\r\n                                    {selectedMonths.map((_, i) => (\r\n                                        <TableCell key={selectedMonths[i]} align=\"center\">\r\n                                            {data[startMonth + i - 1] || 0}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                    <TableCell align=\"center\">\r\n                                        {total}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                );\r\n                            })}\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>Total</TableCell>\r\n                                {selectedMonths.map((month, idx) => (\r\n                                    <TableCell key={month} align=\"center\" sx={{ fontWeight: 'bold' }}>\r\n                                        {Array.isArray(totalIncomes2) ? (totalIncomes2[startMonth + idx - 1] || 0) : 0}\r\n                                    </TableCell>\r\n                                ))}\r\n                                <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\r\n                                    {Array.isArray(totalIncomes2)\r\n                                        ? selectedMonths.reduce(\r\n                                            (acc, _, idx) => acc + (totalIncomes2[startMonth + idx - 1] || 0), 0\r\n                                        )\r\n                                        : 0}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                </>\r\n            )}\r\n\r\n            {/* Estado vacío */}\r\n            {!showTables && !isLoading && (\r\n                <Paper \r\n                    elevation={4} \r\n                    sx={{ \r\n                        p: 6, \r\n                        textAlign: 'center', \r\n                        background: 'linear-gradient(135deg, #F8FAFC 0%, #F1F5F9 100%)',\r\n                        border: '2px solid #E2E8F0',\r\n                        borderRadius: 3,\r\n                        mt: 4\r\n                    }}\r\n                >\r\n                    <AssessmentIcon sx={{ fontSize: 64, color: '#94A3B8', mb: 3 }} />\r\n                    <Typography variant=\"h5\" sx={{ color: '#5B21B6', fontWeight: 'bold', mb: 2 }}>\r\n                        Genere su Reporte\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" sx={{ color: '#64748B', maxWidth: 400, mx: 'auto' }}>\r\n                        Seleccione el rango de meses y haga clic en \"Generar Reportes\" para ver los análisis de ventas\r\n                    </Typography>\r\n                </Paper>\r\n            )}\r\n\r\n            {/* Help Section */}\r\n            <Box sx={{ mt: 6, textAlign: 'center', p: 3, bgcolor: 'white', borderRadius: 2, border: '1px solid #E2E8F0' }}>\r\n                <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n                ¿Preguntas? Contacta con nosotros: unique.bussiness@gmail.com\r\n                </Typography>\r\n            </Box>\r\n        </Container>\r\n    </Box>\r\n    );\r\n};\r\n\r\nexport default Reports;","usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\StatusKartBooking.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchBookings' and 'rut'. Either include them or remove the dependency array.","line":173,"column":6,"nodeType":"ArrayExpression","endLine":173,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [fetchBookings, refresh, rut]","fix":{"range":[5323,5332],"text":"[fetchBookings, refresh, rut]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Grid,\r\n  Alert,\r\n  Box,\r\n  Chip,\r\n  CircularProgress,\r\n  Paper,\r\n  Snackbar\r\n} from '@mui/material';\r\nimport {\r\n  Search as SearchIcon,\r\n  Cancel as CancelIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Info as InfoIcon,\r\n  Schedule as ScheduleIcon,\r\n  Group as GroupIcon,\r\n  CalendarToday as CalendarIcon,\r\n  SportsMotorsports as SportsMotorsportsIcon,\r\n  Email as EmailIcon\r\n} from '@mui/icons-material';\r\nimport bookingService from '../services/services.management';\r\n\r\nconst StatusKartBooking = () => {\r\n  const [rut, setRut] = useState('');\r\n  const [bookings, setBookings] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [cancelBookingId, setCancelBookingId] = useState(null);\r\n  const [refresh, setRefresh] = useState(false);\r\n  \r\n  // Estados para mejorar UX (Nielsen: Visibilidad del estado del sistema)\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n  // Función para validar RUT (Nielsen: Prevención de errores)\r\n  const validateRut = (rut) => {\r\n    const rutRegex = /^\\d{7,8}-[\\dkK]$/; // Formato: 12345678-9 o 1234567-K\r\n    return rutRegex.test(rut.trim());\r\n  };\r\n\r\n  // Función para obtener el color del estado (Nielsen: Reconocimiento antes que recuerdo)\r\n  const getStatusColor = (status) => {\r\n    switch (status?.toLowerCase()) {\r\n      case 'confirmada':\r\n        return 'success';\r\n      case 'pendiente':\r\n        return 'warning';\r\n      case 'cancelada':\r\n        return 'error';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  // Función para obtener el ícono del estado (Nielsen: Reconocimiento antes que recuerdo)\r\n  const getStatusIcon = (status) => {\r\n    switch (status?.toLowerCase()) {\r\n      case 'confirmada':\r\n        return <CheckCircleIcon />;\r\n      case 'pendiente':\r\n        return <ScheduleIcon />;\r\n      case 'cancelada':\r\n        return <CancelIcon />;\r\n      default:\r\n        return <InfoIcon />;\r\n    }\r\n  };\r\n\r\n  // Función para extraer mensaje de error del backend\r\n  const extractErrorMessage = (error) => {\r\n    if (error.response?.data) {\r\n      // Si el backend retorna un string directamente\r\n      if (typeof error.response.data === 'string') {\r\n        return error.response.data;\r\n      }\r\n      // Si el backend retorna un objeto con mensaje\r\n      if (error.response.data.message) {\r\n        return error.response.data.message;\r\n      }\r\n      // Si el backend retorna un objeto con error\r\n      if (error.response.data.error) {\r\n        return error.response.data.error;\r\n      }\r\n      // Si hay otros campos comunes de error\r\n      if (error.response.data.details) {\r\n        return error.response.data.details;\r\n      }\r\n    }\r\n    \r\n    // Si es un error de red\r\n    if (error.message) {\r\n      if (error.message.includes('Network Error') || error.message.includes('ERR_NETWORK')) {\r\n        return 'Error de conexión. Verifique su conexión a internet e intente nuevamente.';\r\n      }\r\n      return error.message;\r\n    }\r\n    \r\n    // Mensaje genérico como último recurso\r\n    return 'Ha ocurrido un error inesperado. Por favor, intente nuevamente.';\r\n  };\r\n\r\n  // Función para cargar las reservas (Nielsen: Visibilidad del estado del sistema)\r\n  const fetchBookings = async () => {\r\n    if (!rut.trim()) {\r\n      setError('Debes ingresar un RUT válido.');\r\n      return;\r\n    }\r\n\r\n    if (!validateRut(rut)) {\r\n      setError('El formato del RUT no es válido. Debe ser: 12345678-9');\r\n      return;\r\n    }\r\n\r\n    setIsSearching(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await bookingService.getBookingByUserRut(rut);\r\n      setBookings(response.data);\r\n      \r\n      if (response.data.length === 0) {\r\n        // Mensaje cuando no hay resultados (puede venir del backend o ser local)\r\n        setError('No se encontraron reservas para este RUT.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error al obtener las reservas:', err);\r\n      // Usar el mensaje del backend\r\n      setError(extractErrorMessage(err));\r\n    } finally {\r\n      setIsSearching(false);\r\n    }\r\n  };\r\n\r\n  // useEffect para manejar la cancelación de reservas (Nielsen: Visibilidad del estado del sistema)\r\n  useEffect(() => {\r\n    const cancelBooking = async () => {\r\n      if (!cancelBookingId) return;\r\n\r\n      setIsLoading(true);\r\n      try {\r\n        await bookingService.cancelBooking(cancelBookingId);\r\n        setSuccessMessage('Reserva cancelada con éxito.');\r\n        setSnackbarOpen(true);\r\n        setCancelBookingId(null);\r\n        setRefresh((prev) => !prev);\r\n      } catch (err) {\r\n        console.error('Error al cancelar la reserva:', err);\r\n        // Usar el mensaje del backend\r\n        setError(extractErrorMessage(err));\r\n        setCancelBookingId(null);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    cancelBooking();\r\n  }, [cancelBookingId]);\r\n\r\n  // useEffect para recargar las reservas cuando cambie el estado `refresh`\r\n  useEffect(() => {\r\n    if (rut.trim() && validateRut(rut)) {\r\n      fetchBookings();\r\n    }\r\n  }, [refresh]);\r\n\r\n  // Función para establecer el bookingId a cancelar (Nielsen: Control y libertad del usuario)\r\n  const handleCancelBooking = (bookingId) => {\r\n    setCancelBookingId(bookingId);\r\n  };\r\n\r\n  // Función para enviar comprobante por correo\r\n  const handleSendVoucher = async (bookingId) => {\r\n    setIsLoading(true);\r\n    try {\r\n      await bookingService.sendVoucherByEmail(bookingId);\r\n      setSuccessMessage('Comprobante enviado exitosamente al correo electrónico.');\r\n      setSnackbarOpen(true);\r\n    } catch (err) {\r\n      console.error('Error al enviar el comprobante:', err);\r\n      setError(extractErrorMessage(err));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Función para manejar el Enter en el campo de búsqueda (Nielsen: Flexibilidad y eficiencia de uso)\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      fetchBookings();\r\n    }\r\n  };\r\n\r\n  // Función para limpiar errores (Nielsen: Control y libertad del usuario)\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  // Función para formatear RUT automáticamente\r\n  const formatRUT = (value) => {\r\n    let clean = value.replace(/[^0-9K]/g, '');\r\n    \r\n    // Limitar a máximo 9 caracteres (8 dígitos + 1 dígito verificador)\r\n    if (clean.length > 9) {\r\n      clean = clean.slice(0, 9);\r\n    }\r\n    \r\n    // Agregar guión automáticamente cuando tenga al menos 8 caracteres\r\n    if (clean.length >= 8) {\r\n      clean = clean.slice(0, -1) + '-' + clean.slice(-1);\r\n    }\r\n    \r\n    return clean;\r\n  };\r\n\r\n  // Función mejorada para manejar cambios en el RUT\r\n  const handleRutChange = (e) => {\r\n    const formattedRut = formatRUT(e.target.value);\r\n    setRut(formattedRut);\r\n    if (error) clearError(); // Limpiar error al escribir\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ bgcolor: 'background.default', minHeight: '100vh' }}>\r\n      {/* Hero Section */}\r\n      <Box \r\n        sx={{ \r\n          background: 'linear-gradient(135deg, #2E1065 0%, #5B21B6 50%, #1E3A8A 100%)',\r\n          color: 'white',\r\n          py: 3,\r\n          textAlign: 'center'\r\n        }}\r\n      >\r\n        <Container maxWidth=\"lg\">\r\n          <SportsMotorsportsIcon sx={{ fontSize: 60, mb: 2, color: 'white' }} />\r\n          <Typography \r\n            variant=\"h3\" \r\n            component=\"h1\" \r\n            gutterBottom \r\n            sx={{ \r\n              fontWeight: 'bold',\r\n              mb: 2,\r\n              fontSize: { xs: '1.8rem' }\r\n            }}\r\n          >\r\n            Estado de Reservas\r\n          </Typography>\r\n          <Typography \r\n            variant=\"h6\" \r\n            sx={{ \r\n              mb: 2,\r\n              opacity: 0.9,\r\n              fontSize: { xs: '1rem' }\r\n            }}\r\n          >\r\n            Consulte, confirme o cancele sus reservas de karting\r\n          </Typography>\r\n        </Container>\r\n      </Box>\r\n\r\n      <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n      {/* Formulario de búsqueda mejorado */}\r\n      <Paper \r\n        elevation={8} \r\n        sx={{ \r\n          p: 4, \r\n          mb: 4,\r\n          background: 'linear-gradient(135deg, #F8FAFC 0%, #F1F5F9 100%)',\r\n          border: '2px solid',\r\n          borderColor: '#E2E8F0',\r\n          borderRadius: 3,\r\n          position: 'relative',\r\n          overflow: 'hidden',\r\n          '&::before': {\r\n            content: '\"\"',\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            height: '4px',\r\n            background: 'linear-gradient(90deg, #5B21B6 0%, #1E3A8A 100%)'\r\n          }\r\n        }}\r\n      >\r\n        <Typography \r\n          variant=\"h5\" \r\n          gutterBottom \r\n          sx={{ \r\n            display: 'flex', \r\n            alignItems: 'center', \r\n            gap: 2,\r\n            color: '#5B21B6',\r\n            fontWeight: 'bold',\r\n            mb: 3\r\n          }}\r\n        >\r\n          <SearchIcon sx={{ fontSize: 30, color: '#5B21B6' }} />\r\n          Buscar Reservas\r\n        </Typography>\r\n        \r\n        <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start', mt: 3 }}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"RUT del cliente\"\r\n            value={rut}\r\n            onChange={handleRutChange}\r\n            onKeyUp={handleKeyPress}\r\n            placeholder=\"Ej: 12345678-9\"\r\n            error={!!error}\r\n            helperText={error || \"Ingrese su RUT para buscar sus reservas\"}\r\n            disabled={isSearching}\r\n            sx={{ \r\n              maxWidth: 350,\r\n              '& .MuiOutlinedInput-root': {\r\n                backgroundColor: 'white',\r\n                '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                  borderColor: '#5B21B6'\r\n                },\r\n                '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                  borderColor: '#5B21B6'\r\n                }\r\n              },\r\n              '& .MuiInputLabel-root.Mui-focused': {\r\n                color: '#5B21B6'\r\n              }\r\n            }}\r\n          />\r\n          \r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={fetchBookings}\r\n            disabled={isSearching || !rut.trim()}\r\n            startIcon={isSearching ? <CircularProgress size={20} color=\"inherit\" /> : <SearchIcon />}\r\n            sx={{ \r\n              minWidth: 140, \r\n              height: 56,\r\n              background: 'linear-gradient(135deg, #5B21B6 0%, #1E3A8A 100%)',\r\n              fontWeight: 'bold',\r\n              '&:hover': {\r\n                background: 'linear-gradient(135deg, #2E1065 0%, #1E40AF 100%)',\r\n                transform: 'translateY(-1px)',\r\n                boxShadow: '0 4px 12px rgba(91, 33, 182, 0.3)'\r\n              },\r\n              '&:disabled': {\r\n                background: '#E2E8F0',\r\n                color: '#94A3B8'\r\n              },\r\n              transition: 'all 0.3s ease'\r\n            }}\r\n          >\r\n            {isSearching ? 'Buscando...' : 'Buscar'}\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Mensajes de error */}\r\n      {error && (\r\n        <Alert \r\n          severity=\"error\" \r\n          sx={{ \r\n            mb: 3,\r\n            borderRadius: 2,\r\n            border: '2px solid #EF4444',\r\n            background: 'linear-gradient(135deg, #FEF2F2 0%, #FEE2E2 100%)',\r\n            '& .MuiAlert-icon': {\r\n              color: '#EF4444'\r\n            },\r\n            '& .MuiAlert-message': {\r\n              color: '#991B1B',\r\n              fontWeight: 500\r\n            }\r\n          }}\r\n          onClose={clearError}\r\n          action={\r\n            <Button \r\n              color=\"inherit\" \r\n              size=\"small\" \r\n              onClick={clearError}\r\n              sx={{ \r\n                color: '#991B1B',\r\n                fontWeight: 'bold',\r\n                '&:hover': {\r\n                  backgroundColor: 'rgba(153, 27, 27, 0.1)'\r\n                }\r\n              }}\r\n            >\r\n              Cerrar\r\n            </Button>\r\n          }\r\n        >\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Grid de reservas */}\r\n      {bookings.length > 0 && (\r\n        <Box sx={{ mb: 4 }}>\r\n          <Typography \r\n            variant=\"h5\" \r\n            gutterBottom \r\n            sx={{ \r\n              display: 'flex', \r\n              alignItems: 'center', \r\n              gap: 2,\r\n              color: '#5B21B6',\r\n              fontWeight: 'bold',\r\n              mb: 3\r\n            }}\r\n          >\r\n            <InfoIcon sx={{ fontSize: 30, color: '#5B21B6' }} />\r\n            Sus Reservas ({bookings.length})\r\n          </Typography>\r\n          \r\n          <Grid container spacing={3}>\r\n            {bookings.map((booking) => (\r\n              <Grid key={booking.id}>\r\n                <Card \r\n                  elevation={6}\r\n                  sx={{ \r\n                    height: '100%',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    position: 'relative',\r\n                    background: 'linear-gradient(135deg, #FFFFFF 0%, #F8FAFC 100%)',\r\n                    border: '2px solid',\r\n                    borderColor: '#E2E8F0',\r\n                    borderRadius: 3,\r\n                    overflow: 'hidden',\r\n                    transition: 'all 0.3s ease',\r\n                    '&::before': {\r\n                      content: '\"\"',\r\n                      position: 'absolute',\r\n                      top: 0,\r\n                      left: 0,\r\n                      right: 0,\r\n                      height: '3px',\r\n                      background: 'linear-gradient(90deg, #5B21B6 0%, #1E3A8A 100%)'\r\n                    }\r\n                  }}\r\n                >\r\n                  <Box sx={{ position: 'absolute', top: 5, right: 16 }}>\r\n                    <Chip\r\n                      icon={getStatusIcon(booking.bookingStatus)}\r\n                      label={booking.bookingStatus?.toUpperCase()}\r\n                      color={getStatusColor(booking.bookingStatus)}\r\n                      size=\"small\"\r\n                      sx={{ fontWeight: 600 }}\r\n                    />\r\n                  </Box>\r\n                  {/* Tarjeta con información resumen de la reserva */}\r\n                  <CardContent sx={{ flexGrow: 1, pt: 6, px: 3 }}>\r\n                    {/* Información principal */}\r\n                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n                        <CalendarIcon sx={{ color: '#5B21B6', fontSize: 20 }} />\r\n                        <Typography variant=\"body1\" sx={{ color: '#1E293B', fontWeight: 500 }}>\r\n                          <strong>Fecha:</strong> {booking.bookingDate}\r\n                        </Typography>\r\n                      </Box>\r\n                      \r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n                        <ScheduleIcon sx={{ color: '#5B21B6', fontSize: 20 }} />\r\n                        <Typography variant=\"body1\" sx={{ color: '#1E293B', fontWeight: 500 }}>\r\n                          <strong>Hora:</strong> {booking.bookingTime}\r\n                        </Typography>\r\n                      </Box>\r\n                      \r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n                        <GroupIcon sx={{ color: '#5B21B6', fontSize: 20 }} />\r\n                        <Typography variant=\"body1\" sx={{ color: '#1E293B', fontWeight: 500 }}>\r\n                          <strong>Personas:</strong> {booking.numOfPeople}\r\n                        </Typography>\r\n                      </Box>\r\n                      \r\n                      <Typography variant=\"body1\" sx={{ color: '#1E293B', fontWeight: 500, ml: 5 }}>\r\n                        <strong>Vueltas/Tiempo:</strong> {booking.lapsOrMaxTimeAllowed}\r\n                      </Typography>\r\n                      \r\n                      <Box \r\n                        sx={{ \r\n                          mt: 2, \r\n                          p: 2, \r\n                          bgcolor: '#F0F9FF', \r\n                          borderRadius: 2, \r\n                          border: '1px solid #BAE6FD',\r\n                          textAlign: 'center'\r\n                        }}\r\n                      >\r\n                        <Typography variant=\"h6\" sx={{ color: '#0369A1', fontWeight: 'bold' }}>\r\n                          Total: ${booking.totalAmount?.toLocaleString()}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  </CardContent>\r\n\r\n                  {/* Acciones contextuales */}\r\n                  <CardActions sx={{ p: 3, pt: 0 }}>\r\n                    {/* Botón para enviar comprobante de reserva */}\r\n                    {booking.bookingStatus === 'confirmada' && (\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        size=\"medium\"\r\n                        startIcon={<EmailIcon />}\r\n                        onClick={() => handleSendVoucher(booking.id)}\r\n                        disabled={isLoading}\r\n                        fullWidth\r\n                        sx={{\r\n                          borderColor: '#5B21B6',\r\n                          color: '#5B21B6',\r\n                          backgroundColor: '#F8FAFC',\r\n                          fontWeight: 'bold',\r\n                          py: 1.5,\r\n                          mb: 1,\r\n                          borderWidth: 2,\r\n                          '&:hover': {\r\n                            borderColor: '#2E1065',\r\n                            color: '#2E1065',\r\n                            backgroundColor: '#EDE9FE',\r\n                            borderWidth: 2\r\n                          },\r\n                          '&:disabled': {\r\n                            borderColor: '#E2E8F0',\r\n                            color: '#94A3B8',\r\n                            backgroundColor: '#F8FAFC'\r\n                          },\r\n                          transition: 'all 0.3s ease'\r\n                        }}\r\n                      >\r\n                        Enviar Comprobante\r\n                      </Button>\r\n                    )}\r\n\r\n                    {/* Botón para anular reserva */}\r\n                    {booking.bookingStatus === 'confirmada' && (\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        color=\"error\"\r\n                        size=\"medium\"\r\n                        startIcon={<CancelIcon />}\r\n                        onClick={() => handleCancelBooking(booking.id)}\r\n                        disabled={isLoading}\r\n                        fullWidth\r\n                        sx={{\r\n                          borderColor: '#EF4444',\r\n                          color: '#EF4444',\r\n                          fontWeight: 'bold',\r\n                          py: 1.5,\r\n                          borderWidth: 2,\r\n                          '&:hover': {\r\n                            borderColor: '#DC2626',\r\n                            color: '#DC2626',\r\n                            backgroundColor: '#FEF2F2',\r\n                            borderWidth: 2\r\n                          },\r\n                          '&:disabled': {\r\n                            borderColor: '#E2E8F0',\r\n                            color: '#94A3B8'\r\n                          },\r\n                          transition: 'all 0.3s ease'\r\n                        }}\r\n                      >\r\n                        Anular Reserva\r\n                      </Button>\r\n                    )}\r\n\r\n                    {booking.bookingStatus === 'cancelada' && (\r\n                      <Box sx={{ width: '100%', textAlign: 'center', py: 1.5 }}>\r\n                        <Typography variant=\"body1\" sx={{ color: '#64748B', fontWeight: 500 }}>\r\n                          Reserva cancelada\r\n                        </Typography>\r\n                      </Box>\r\n                    )}\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Estado vacío mejorado */}\r\n      {bookings.length === 0 && !error && !isSearching && (\r\n        <Paper \r\n          elevation={4} \r\n          sx={{ \r\n            p: 6, \r\n            textAlign: 'center', \r\n            background: 'linear-gradient(135deg, #F8FAFC 0%, #F1F5F9 100%)',\r\n            border: '2px solid #E2E8F0',\r\n            borderRadius: 3\r\n          }}\r\n        >\r\n          <InfoIcon sx={{ fontSize: 64, color: '#94A3B8', mb: 3 }} />\r\n          <Typography variant=\"h5\" sx={{ color: '#5B21B6', fontWeight: 'bold', mb: 2 }}>\r\n            No hay reservas para mostrar\r\n          </Typography>\r\n          <Typography variant=\"body1\" sx={{ color: '#64748B', maxWidth: 400, mx: 'auto' }}>\r\n            Ingrese su RUT para buscar sus reservas de karting y gestionar sus experiencias\r\n          </Typography>\r\n        </Paper>\r\n      )}\r\n\r\n      {/* Snackbar para mensajes de éxito mejorado */}\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbarOpen(false)}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n      >\r\n        <Alert \r\n          onClose={() => setSnackbarOpen(false)} \r\n          severity=\"success\" \r\n          sx={{ \r\n            width: '100%',\r\n            borderRadius: 2,\r\n            fontWeight: 'bold'\r\n          }}\r\n          variant=\"filled\"\r\n        >\r\n          {successMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      {/* Help Section */}\r\n      <Box sx={{ mt: 6, textAlign: 'center', p: 3, bgcolor: 'white', borderRadius: 2, border: '1px solid #E2E8F0' }}>\r\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n          ¿Preguntas? Contacta con nosotros: unique.bussiness@gmail.com\r\n        </Typography>\r\n      </Box>\r\n    </Container>\r\n  </Box>\r\n  );\r\n};\r\n\r\nexport default StatusKartBooking;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\booking\\ActivityDetailsSection.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\booking\\DateTimeSection.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\components\\booking\\ParticipantsSection.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\main.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\UNIVERSIDAD\\TINGESO\\Tingeso-2-kartingRM-Ms\\karting2Frontend\\src\\services\\services.management.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]